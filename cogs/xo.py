import logging
import asyncio # Added asyncio
from nextcord.ext import commands
from nextcord import Interaction, slash_command, Embed
from db.database import (
    add_to_queue, find_match, create_game, get_game_state,
    is_in_queue, is_in_game, get_leaderboard_data # Added get_leaderboard_data
)
from game.views import XOGameView
from datetime import datetime

logger = logging.getLogger(__name__)

class XO(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.matchmaking_lock = asyncio.Lock() # Initialize lock

    @slash_command(name="xomatch", description="‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° XO")
    async def xomatch(self, interaction: Interaction):
        logger.info(f"START: /xomatch called by {interaction.user} (ID: {interaction.user.id})")
        await interaction.response.defer(ephemeral=True)

        user = interaction.user
        user_id = user.id

        # Initial checks (outside the lock, for quick feedback)
        if await is_in_queue(user_id):
            embed = Embed(
                title="‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", # Removed emoji
                description="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ `/cancel` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß",
                color=0xFF5733
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
            return

        if await is_in_game(user_id):
            embed = Embed(
                title="‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö", # Removed emoji
                description="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏à‡∏ö‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/forfeit` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ",
                color=0xFFC300
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
            return

        async with self.matchmaking_lock:
            logger.info(f"User {user_id} acquired matchmaking_lock")

            # Re-check conditions inside the lock
            if await is_in_queue(user_id):
                logger.info(f"User {user_id} is already in queue (checked inside lock).")
                embed = Embed(
                    title="‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", # Removed emoji
                    description="‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
                    color=0xFF5733
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
                return

            if await is_in_game(user_id):
                logger.info(f"User {user_id} is already in game (checked inside lock).")
                embed = Embed(
                    title="‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!", # Removed emoji
                    description="‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DM ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß",
                    color=0xFFC300
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
                return

            await add_to_queue(user_id, str(user), interaction.guild.id, interaction.channel.id)
            logger.info(f"Added to queue: {user_id} (inside lock)")

            opponent = await find_match(user_id)
            if opponent:
                logger.info(f"Found opponent: {opponent} for user: {user_id} (inside lock)")
                game_id, _ = await create_game(user_id, opponent)
                logger.info(f"Game created: {game_id} for users {user_id} and {opponent} (inside lock)")

                state = await get_game_state(game_id)
                if not state:
                    logger.error(f"Failed to get game state for game_id {game_id} (inside lock)")
                    embed = Embed(
                        title="‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", # Removed emoji
                        description="‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
                        color=0xE74C3C
                    )
                    await interaction.followup.send(embed=embed, ephemeral=True)
                    return

                view = XOGameView(
                    self.bot,
                    game_id=game_id,
                    player_x=state["player_x"],
                    player_o=state["player_o"],
                    board=state["board"],
                    turn=state["turn"],
                    start_time=state["start_time"]
                )

                try:
                    user1 = await self.bot.fetch_user(state["player_x"])
                    user2 = await self.bot.fetch_user(state["player_o"])
                    logger.info(f"Sending DM for game {game_id} to {user1} and {user2} (inside lock)")

                    msg1 = await user1.send(content=view.current_turn_display(), view=view)
                    msg2 = await user2.send(content=view.current_turn_display(), view=view)
                    view.messages = [msg1, msg2]

                    embed_dm = Embed(
                        title="‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!", # Removed emoji
                        description=f"""‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô <@{state['player_x']}> ‡∏û‡∏ö‡∏Å‡∏±‡∏ö <@{state['player_o']}>
‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á DM ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!""",
                        color=0x2ECC71
                    )

                    # Sending to channel does not need to be ephemeral
                    await interaction.channel.send( 
                        content=f"<@{state['player_x']}> <@{state['player_o']}>",
                        embed=embed_dm
                    )

                    await interaction.followup.send(embed=Embed(
                        description="‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏ä‡πá‡∏Ñ DM ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô", # Removed emoji
                        color=0x2ECC71
                    ), ephemeral=True)

                except Exception as e:
                    logger.error(f"Failed to send DM for game {game_id}: {e} (inside lock)", exc_info=True)
                    await interaction.followup.send(embed=Embed(
                        title="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÑ‡∏î‡πâ", # Removed emoji
                        description="‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
                        color=0xE74C3C
                    ), ephemeral=True)
            else:
                logger.info(f"No opponent found for {user_id}. User remains in queue. (inside lock)")
                embed = Embed(
                    title="‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", # Removed emoji
                    description="""‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° DM ‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥""", # Removed emoji
                    color=0x3498DB
                )
                embed.set_footer(text=f"‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
                await interaction.followup.send(embed=embed, ephemeral=True)
        logger.info(f"User {user_id} released matchmaking_lock")

    @slash_command(name="leaderboard", description="‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° XO")
    async def leaderboard(self, interaction: Interaction):
        logger.info(f"START: /leaderboard called by {interaction.user} (ID: {interaction.user.id})")
        await interaction.response.defer()

        try:
            leaderboard_entries = await get_leaderboard_data(top_n=10)

            embed = Embed(title="üèÜ XO Game Leaderboard (Top 10)", color=0x0099FF) # Blue color

            if not leaderboard_entries:
                embed.description = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô leaderboard ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏¥! üöÄ"
            else:
                description_lines = []
                for rank, entry in enumerate(leaderboard_entries, start=1):
                    user_id, username, wins, losses, draws = entry
                    # Ensure username is not None and is a string
                    username_display = str(username) if username else f"User ID: {user_id}"
                    description_lines.append(
                        f"**{rank}.** <@{user_id}> ({username_display})\n"
                        f"   ‡∏ä‡∏ô‡∏∞: {wins} ‡πÅ‡∏û‡πâ: {losses} ‡πÄ‡∏™‡∏°‡∏≠: {draws}"
                    )
                embed.description = "\n\n".join(description_lines)
            
            await interaction.followup.send(embed=embed)

        except Exception as e:
            logger.error(f"Error fetching leaderboard data: {e}", exc_info=True)
            error_embed = Embed(
                title="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                description="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• leaderboard ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
                color=0xFF0000 # Red color
            )
            await interaction.followup.send(embed=error_embed)


def setup(bot):
    bot.add_cog(XO(bot))
