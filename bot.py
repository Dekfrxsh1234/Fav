import nextcord
from nextcord.ext import commands
from nextcord.ext.commands import (
    CommandNotFound, MissingRequiredArgument, BadArgument, CheckFailure,
    CommandOnCooldown, MissingPermissions
)
import logging
import asyncio
import os
from db.database import setup_db
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("DISCORD_BOT_TOKEN")

# Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s", filename="bot.log", filemode="a")

# Intents
intents = nextcord.Intents.default()
intents.guilds = True
intents.members = True
intents.messages = True
intents.message_content = True

# Bot setup
bot = commands.AutoShardedBot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user} | Shards: {bot.shard_count}")
    await setup_db()

    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Cog ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î
    extensions = ["cogs.xo", "cogs.status", "cogs.timeout_checker"]

    for ext in extensions:
        try:
            bot.load_extension(ext)
            print(f"‚úÖ Loaded extension: {ext}")
        except Exception as e:
            print(f"‚ùå Failed to load extension {ext}: {e}")

    print("üîÑ Attempting to sync slash commands...")
    try:
        await bot.sync_all_application_commands()
        print("‚úÖ Slash commands synced successfully")
    except Exception as e:
        print(f"‚ùå Failed to sync slash commands: {e}")

@bot.event
async def on_command_error(ctx, error):
    log_message = f"Command Error: {error} | Command: {ctx.command.qualified_name if ctx.command else 'N/A'} | User: {ctx.author.id} | Guild: {ctx.guild.id if ctx.guild else 'DM'}"

    if isinstance(error, CommandNotFound):
        logging.warning(f"CommandNotFound: {ctx.message.content} by {ctx.author.id}")
        # Optionally, send a subtle message or do nothing
        # await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞", delete_after=10)
        return
    elif isinstance(error, MissingRequiredArgument):
        logging.info(f"MissingRequiredArgument: {error.param.name} for {ctx.command.qualified_name} by {ctx.author.id}")
        await ctx.send(f"‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà `{error.param.name}` ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞")
    elif isinstance(error, BadArgument):
        logging.info(f"BadArgument: {error} for {ctx.command.qualified_name} by {ctx.author.id}")
        await ctx.send("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏™‡πà argument ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞")
    elif isinstance(error, CommandOnCooldown):
        logging.info(f"CommandOnCooldown: {ctx.command.qualified_name} by {ctx.author.id}. Cooldown: {error.retry_after:.2f}s")
        await ctx.send(f"‚è≥ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á cooldown ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å {error.retry_after:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    elif isinstance(error, MissingPermissions):
        logging.warning(f"MissingPermissions: {error.missing_permissions} for {ctx.command.qualified_name} by {ctx.author.id}")
        await ctx.send("üö´ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
    elif isinstance(error, CheckFailure):
        logging.warning(f"CheckFailure: {error} for {ctx.command.qualified_name} by {ctx.author.id}")
        await ctx.send("üö´ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
    else:
        logging.exception(log_message)
        await ctx.send("‡πÇ‡∏≠‡πä‡∏∞! ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏∞ üõ†Ô∏è")

if __name__ == "__main__":
    bot.run(TOKEN)
